#!/usr/bin/env python3
import os
from telegram import Update, Message
from telegram.ext import (
    ApplicationBuilder,
    MessageHandler,
    CommandHandler,
    ContextTypes,
    filters,
)
from db import SessionLocal, get_player, get_jackpot, get_chat, load_event_chats
from models import PlayerModel
from events import EventManager
from items import get_item, ITEMS

TOKEN: str = os.getenv("BOT_TOKEN")
SPIN_COST: int = int(os.getenv("SPIN_COST", "2"))
JACKPOT_INCREMENT: int = int(os.getenv("JACKPOT_INCREMENT", "1"))
JACKPOT_START: int = int(os.getenv("JACKPOT_START", "0"))
START_BALANCE: int = int(os.getenv("START_BALANCE", "100"))
MAP = [1, 2, 3, 0]


def _decode(val: int) -> list[int]:  # ---------------- –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å ----------------
    v = val - 1
    return [MAP[v & 3], MAP[(v >> 2) & 3], MAP[(v >> 4) & 3]]


def _calc_prize(val: int, symbols: list[int], sevens: int) -> tuple[bool, int]:
    if val == 64:
        return [True, 15]
    if len(set(symbols)) == 1:
        return [False, 10]
    if sevens == 2:
        return [False, 8]
    return [False, 0]


async def _reply_clean(
    update: Update,
    context: ContextTypes.DEFAULT_TYPE,
    text: str,
    *,
    is_slot: bool = False,
    **kwargs,
) -> Message:
    chat_id = update.effective_chat.id
    store = context.user_data

    keys = ("last_bot_id", "last_user_id", "last_slot_id")
    for key in keys:
        mid = store.pop(key, None)
        if mid:
            try:
                await context.bot.delete_message(chat_id, mid)
            except Exception:
                pass

    msg = await update.message.reply_text(text, **kwargs)

    if is_slot:
        store["last_slot_id"] = update.message.message_id
    store["last_bot_id"] = msg.message_id
    store["last_user_id"] = update.message.message_id

    return msg


def _is_chat_registered_for_events(
    chat_id: int, context: ContextTypes.DEFAULT_TYPE
) -> bool:
    return chat_id in context.application.bot_data.get("chats", set())


async def casino_spin(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    user = update.effective_user
    dice_msg = update.message

    mgr: EventManager = context.application.bot_data["mgr"]
    if mgr.is_active_participant(chat_id, user.id):
        await _reply_clean(
            update, context, "üöß –¢—ã —É—á–∞—Å—Ç–≤—É–µ—à—å –≤ –∏–≤–µ–Ω—Ç–µ ‚Äî –¥–æ–∂–¥–∏—Å—å –æ–∫–æ–Ω—á–∞–Ω–∏—è."
        )
        return

    with SessionLocal() as db:
        player = get_player(db, user.id, user.first_name, START_BALANCE)
        jackpot_obj = get_jackpot(db, chat_id, JACKPOT_START)

        if player.balance < SPIN_COST:
            await _reply_clean(
                update, context, f"‚ùå {player.first_name}, –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –æ—á–∫–æ–≤. –û—Ç–¥–æ—Ö–Ω–∏!"
            )
            return

        player.balance -= SPIN_COST

        val = dice_msg.dice.value
        symbols = _decode(val)
        is_jack, prize = _calc_prize(val, symbols, symbols.count(0))

        if not is_jack:
            jackpot_obj.jackpot += JACKPOT_INCREMENT
        else:
            prize += jackpot_obj.jackpot
            jackpot_before = jackpot_obj.jackpot
            jackpot_obj.jackpot = JACKPOT_START

        player.balance += prize
        profit = prize - SPIN_COST
        balance = player.balance
        db.commit()
        current_jackpot = jackpot_obj.jackpot

    for key in ("last_slot_id", "last_bot_id", "last_user_id"):
        mid = context.user_data.pop(key, None)
        if mid:
            try:
                await context.bot.delete_message(chat_id, mid)
            except Exception:
                pass

    trend = "ü§ë" if profit > 0 else "üíÄ" if profit < 0 else "üòë"
    text = f"üè¶: {balance:,} | {trend} {profit:+,} | üé∞ {current_jackpot:,}"

    bot_msg = await dice_msg.reply_text(text)

    context.user_data["last_slot_id"] = dice_msg.message_id
    context.user_data["last_bot_id"] = bot_msg.message_id

    if is_jack and jackpot_before:
        await context.bot.send_message(
            chat_id,
            f"üéâ {user.first_name} —Å–æ—Ä–≤–∞–ª –¥–∂–µ–∫–ø–æ—Ç ‚Äî {jackpot_before:,} –º–æ–Ω–µ—Ç! üéâ",
        )


async def join_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not _is_chat_registered_for_events(update.effective_chat.id, context):
        await _reply_clean(update, context, "–ß–∞—Ç –Ω–µ —É—á–∞—Å—Ç–≤—É–µ—Ç –≤ –∏–≤–µ–Ω—Ç–∞—Ö.")
        return
    ev_id = context.args[0].lower() if context.args else None
    ok, msg = context.application.bot_data["mgr"].join(
        update.effective_chat.id,
        update.effective_user.id,
        ev_id,
        update.effective_user.first_name,
    )
    await _reply_clean(update, context, msg)


async def event_info_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not _is_chat_registered_for_events(update.effective_chat.id, context):
        await _reply_clean(update, context, "–ß–∞—Ç –Ω–µ —É—á–∞—Å—Ç–≤—É–µ—Ç –≤ –∏–≤–µ–Ω—Ç–∞—Ö.")
        return
    await _reply_clean(update, context, context.application.bot_data["mgr"].info())


async def jackpot_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    with SessionLocal() as session:
        jp = get_jackpot(session, update.effective_chat.id, JACKPOT_START).jackpot
    await _reply_clean(update, context, f"üéØ –¢–µ–∫—É—â–∏–π –¥–∂–µ–∫-–ø–æ—Ç: {jp} –æ—á–∫–æ–≤")


async def status_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    with SessionLocal() as session:
        player = get_player(session, user.id, user.first_name, START_BALANCE)

        rank = (
            session.query(PlayerModel)
            .filter(PlayerModel.balance > player.balance)
            .count()
            + 1
        )

        inv = player.items or {}
        if inv:
            inv_lines = []
            for id_str, qty in inv.items():
                item_obj = ITEMS.get(int(id_str))
                name = item_obj.name if item_obj else f"ID {id_str}"
                inv_lines.append(f"‚Ä¢ (ID:{id_str}) {name} √ó {qty}")
            inv_block = "üéí –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å:\n" + "\n".join(inv_lines)
        else:
            inv_block = "üéí –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å –ø—É—Å—Ç"

    msg = (
        f"üëΩ {player.first_name} (id:{player.id})\n"
        f"üè¶ –ë–∞–ª–∞–Ω—Å: {player.balance:,}\n"
        f"üìä –ú–µ—Å—Ç–æ –≤ —Ç–æ–ø–µ: {rank}\n\n"
        f"{inv_block}"
    )
    await _reply_clean(update, context, msg)


async def top_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    with SessionLocal() as session:
        top = (
            session.query(PlayerModel)
            .order_by(PlayerModel.balance.desc())
            .limit(10)
            .all()
        )

    if not top:
        await _reply_clean(update, context, "–ü–æ–∫–∞ –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞.")
        return

    lines = ["üèÜ –¢–û–ü-10 –∏–≥—Ä–æ–∫–æ–≤:"]
    for i, p in enumerate(top, 1):
        lines.append(f"{i}. {p.first_name} (id:{p.id}) ‚Äî {p.balance:,}")
    await _reply_clean(update, context, "\n".join(lines))


async def buy_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.args:
        await _reply_clean(update, context, "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /buy <id> [–∫–æ–ª-–≤–æ]")
        return

    try:
        item_id = int(context.args[0])
        qty = int(context.args[1]) if len(context.args) > 1 else 1
    except ValueError:
        await _reply_clean(update, context, "id –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —á–∏—Å–ª–∞–º–∏")
        return

    item = get_item(item_id)
    if not item:
        await _reply_clean(update, context, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–æ–≤–∞—Ä")
        return

    user = update.effective_user
    with SessionLocal() as s:
        player = get_player(s, user.id, user.first_name, START_BALANCE)
        cost = item.price * qty
        if player.balance < cost:
            await _reply_clean(update, context, "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç, –¥—Ä—É–∂–æ–∫")
            return
        try:
            item.buy(player, qty)
        except ValueError as e:
            await _reply_clean(update, context, str(e))
            return

        player.balance -= cost
        s.commit()

    await _reply_clean(
        update, context, f"üõí –ö—É–ø–ª–µ–Ω–æ: {item.name} √ó{qty} –∑–∞ {cost} –º–æ–Ω–µ—Ç"
    )


async def use_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.args:
        await _reply_clean(update, context, "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /use <id> [–∫–æ–ª-–≤–æ]")
        return

    try:
        item_id = int(context.args[0])
        qty = int(context.args[1]) if len(context.args) > 1 else 1
    except ValueError:
        await _reply_clean(update, context, "id –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —á–∏—Å–ª–∞–º–∏")
        return

    item = get_item(item_id)
    if not item:
        await _reply_clean(update, context, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç")
        return

    user = update.effective_user
    with SessionLocal() as s:
        player = get_player(s, user.id, user.first_name, START_BALANCE)

        have = (player.items or {}).get(str(item.id), 0)
        if have < qty:
            await _reply_clean(update, context, "–£ —Ç–µ–±—è –Ω–µ—Ç —Ç–∞–∫–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞, –¥—Ä—É–≥")
            return

        try:
            msg = item.use(player, qty)
        except ValueError as e:
            await _reply_clean(update, context, str(e))
            return

        s.commit()

    await _reply_clean(update, context, msg)


async def shop_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    lines = ["üõç –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–æ–≤–∞—Ä—á–∏–∫–∏:"]
    for item_id in sorted(ITEMS):
        it = ITEMS[item_id]
        lines.append(f"ID:{item_id}. {it.name} ‚Äî {it.price} –º–æ–Ω–µ—Ç\n" f"üìú {it.desc}")
    await _reply_clean(update, context, "\n".join(lines))


async def register_chat_for_events_cmd(
    update: Update, context: ContextTypes.DEFAULT_TYPE
):
    chat_id = update.effective_chat.id
    if _is_chat_registered_for_events(update.effective_chat.id, context):
        await _reply_clean(update, context, "–≠—Ç–æ—Ç —á–∞—Ç —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –¥–ª—è –∏–≤–µ–Ω—Ç–æ–≤.")
        return

    with SessionLocal() as session:
        chat_model = get_chat(session, chat_id)
        chat_model.events = True
        context.application.bot_data.setdefault("chats", set()).add(chat_id)
        session.commit()
        await _reply_clean(
            update, context, "–ß–∞—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –¥–ª—è —É—á–∞—Å—Ç–∏—è –≤ –∏–≤–µ–Ω—Ç–∞—Ö."
        )


async def help_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    help_text = (
        "üìñ <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã</b>\n"
        "\n"
        "üé∞ <b>–°–ª–æ—Ç-–º–∞—à–∏–Ω–∞</b> ‚Äî –ø—Ä–æ—Å—Ç–æ –ø—Ä–∏—à–ª–∏—Ç–µ –∫—É–±–∏–∫-—Å–ª–æ—Ç –≤ —á–∞—Ç.\n"
        "\n"
        "üõéÔ∏è  /join - –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ —Ç–µ–∫—É—â–µ–º—É –∏–≤–µ–Ω—Ç—É\n"
        "üìÖ  /event(s) - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∏–≤–µ–Ω—Ç–∞—Ö\n"
        "üéØ  /jackpot - —Ä–∞–∑–º–µ—Ä –¥–∂–µ–∫-–ø–æ—Ç–∞ –≤ —á–∞—Ç–µ\n"
        "\n"
        "üë§  /status - –≤–∞—à –±–∞–ª–∞–Ω—Å, –º–µ—Å—Ç–æ –∏ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å\n"
        "üèÜ  /top - —Ç–æ–ø-10 –∏–≥—Ä–æ–∫–æ–≤ –ø–æ –±–∞–ª–∞–Ω—Å—É\n"
        "üõçÔ∏è  /shop - —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –º–∞–≥–∞–∑–∏–Ω–∞\n"
        "üí∞  /buy <i>id</i> [n] - –∫—É–ø–∏—Ç—å —Ç–æ–≤–∞—Ä (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 1 —à—Ç.)\n"
        "üéí  /use <i>id</i> [n] - –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–≤–∞—Ä –∏–∑ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è\n"
        "\n"
        "‚öôÔ∏è  /register_chat_for_events - –ø–æ–¥–∫–ª—é—á–∏—Ç—å —á–∞—Ç –∫ –∏–≤–µ–Ω—Ç–∞–º\n"
    )
    await update.message.reply_text(help_text, parse_mode="HTML")


async def after_init(app):
    app.bot_data["chats"] = load_event_chats()
    app.bot_data["mgr"] = EventManager(app)


def main() -> None:
    app = ApplicationBuilder().token(TOKEN).post_init(after_init).build()

    slot_filter = filters.Dice.SLOT_MACHINE & ~filters.FORWARDED
    app.add_handler(MessageHandler(slot_filter, casino_spin))
    app.add_handler(CommandHandler("join", join_cmd))
    app.add_handler(CommandHandler(["event", "events"], event_info_cmd))
    app.add_handler(CommandHandler(["jackpot", "ochko"], jackpot_cmd))
    app.add_handler(
        CommandHandler("register_chat_for_events", register_chat_for_events_cmd)
    )
    app.add_handler(CommandHandler("status", status_cmd))
    app.add_handler(CommandHandler("top", top_cmd))
    app.add_handler(CommandHandler("buy", buy_cmd))
    app.add_handler(CommandHandler("use", use_cmd))
    app.add_handler(CommandHandler("shop", shop_cmd))
    app.add_handler(CommandHandler("help", help_cmd))

    app.run_polling()


if __name__ == "__main__":
    main()
