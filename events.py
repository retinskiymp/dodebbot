import os, random
from datetime import datetime, timedelta
from abc import ABC, abstractmethod
from db import SessionLocal, get_player

# –í—Å–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã –≤ –°–ï–ö–£–ù–î–ê–•
MIN_WAIT = int(os.getenv("EVENT_MIN_WAIT", "10"))  # 10 –º–∏–Ω ‚Üí 600 —Å
MAX_WAIT = int(os.getenv("EVENT_MAX_WAIT", "10"))
MIN_DUR = int(os.getenv("EVENT_MIN_DUR", "10"))
MAX_DUR = int(os.getenv("EVENT_MAX_DUR", "10"))
MIN_GAP = int(os.getenv("EVENT_GAP_MIN", "10"))
MAX_GAP = int(os.getenv("EVENT_GAP_MAX", "10"))


def fmt(sec: int) -> str:
    m, s = divmod(sec, 60)
    h, m = divmod(m, 60)
    parts = []
    if h:
        parts.append(f"{h} —á")
    if m:
        parts.append(f"{m} –º–∏–Ω")
    if not parts:
        parts.append(f"{s} —Å–µ–∫")
    return " ".join(parts)


class BaseEvent(ABC):
    id: str
    name: str

    def __init__(self, participants: dict[int, set[int]]):
        self.participants = participants

    @abstractmethod
    def finish(self) -> dict[int, str]:
        """
        –í–µ—Ä–Ω—É—Ç—å {chat_id: —Ç–µ–∫—Å—Ç}, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç —Ä–∞–∑–æ—Å–ª–∞–Ω –≤ –∫–∞–∂–¥—ã–π —á–∞—Ç.
        –ú–µ—Ç–æ–¥ –º–æ–∂–µ—Ç –Ω–∞—á–∏—Å–ª—è—Ç—å –Ω–∞–≥—Ä–∞–¥—ã –∏–≥—Ä–æ–∫–∞–º.
        """


class BanEvent(BaseEvent):
    id = "ban"
    name = "–ë–∞–Ω—å–∫–∞ —Å –ù–∏–∫–∏—Ç–æ–π"

    TEMPLATES = {
        100: [
            "{name} –ø–∞—Ä–∏–ª—Å—è –∫–∞–∫ —á–µ–º–ø–∏–æ–Ω ‚Äì –ù–∏–∫–∏—Ç–∞ –≤—ã–¥–∞–ª {prize} –æ—á–∫–æ–≤!",
            "üî• {name} –≤—ã–¥–µ—Ä–∂–∞–ª —Å–∞–º—ã–π –∂–∞—Ä ‚Äì +{prize} –æ—á–∫–æ–≤ –æ—Ç –ù–∏–∫–∏—Ç—ã.",
        ],
        60: [
            "{name} —É–≤–µ—Ä–µ–Ω–Ω–æ –∑–∞–ø–æ—Ç–µ–ª, –∑–∞—Å–ª—É–∂–∏–≤ {prize} –æ—á–∫–æ–≤.",
            "–•–æ—Ä–æ—à–∏–π –∑–∞—Ö–æ–¥, {name}! –ù–∏–∫–∏—Ç–∞ –¥–∞—Ä–∏—Ç {prize} –æ—á–∫–æ–≤.",
        ],
        40: [
            "{name} –ø–∏—Å–∞–ª –Ω–∞ –∫–∞–º–Ω–∏, —Ä–∞—Å—Å–º–µ—à–∏–ª –ù–∏–∫–∏—Ç—É ‚Äì {prize} –æ—á–∫–æ–≤.",
            "üòÇ {name} —É—Å—Ç—Ä–æ–∏–ª —à–æ—É: –ù–∏–∫–∏—Ç–∞ –æ—Ç—Å—ã–ø–∞–ª {prize} –æ—á–∫–æ–≤.",
        ],
        20: [
            "{name} –ø—Ä–æ—Å—Ç–æ –≥—Ä–µ–ª—Å—è –≤ —É–≥–æ–ª–∫–µ –∏ –ø–æ–ª—É—á–∏–ª {prize} –æ—á–∫–æ–≤.",
            "–°–∫—Ä–æ–º–Ω–µ–Ω—å–∫–æ, {name}. –î–µ—Ä–∂–∏ {prize} –æ—á–∫–æ–≤ –∑–∞ —É—á–∞—Å—Ç–∏–µ.",
        ],
    }
    PRIZE_POOL = [100, 60, 40, 20]  # –º–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä–∏—Ç—å

    def finish(self) -> dict[int, str]:
        result: dict[int, str] = {}

        with SessionLocal() as s:

            for chat_id, uids in self.participants.items():
                if not uids:
                    result[chat_id] = "–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –Ω–µ –±—ã–ª–æ."
                    continue

                users = list(uids)
                random.shuffle(users)

                prizes = random.choices(self.PRIZE_POOL, k=len(users))

                lines = []
                for uid, prize in zip(users, prizes):
                    pl = get_player(s, uid, "", 0)
                    pl.balance += prize
                    phrase = random.choice(self.TEMPLATES[prize]).format(
                        name=pl.first_name, prize=prize
                    )
                    lines.append(phrase)

                s.commit()
                result[chat_id] = "\n".join(lines)

        return result


EVENT_POOL = [BanEvent]


class EventManager:
    def __init__(self, app):
        self.jq = app.job_queue
        self.curr = None
        self.next_start: datetime | None = None
        gap_sec = random.randint(MIN_GAP, MAX_GAP)
        self.next_start = datetime.utcnow() + timedelta(seconds=gap_sec)
        self.jq.run_once(self._schedule_next, gap_sec)

    def is_active_participant(self, chat_id: int, user_id: int) -> bool:
        return (
            self.curr
            and self.curr["status"] == "active"
            and user_id in self.curr["participants"].get(chat_id, set())
        )

    def join(
        self, chat_id: int, user_id: int, ev_id: str | None, user_name: str
    ) -> tuple[bool, str]:
        if not self.curr or self.curr["status"] != "waiting":
            return False, "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–∫—Ä—ã—Ç–∞"
        if ev_id and ev_id != self.curr["id"]:
            return False, "–¢–∞–∫–æ–≥–æ –∏–≤–µ–Ω—Ç–∞ —Å–µ–π—á–∞—Å –Ω–µ—Ç"
        if user_id in self.curr["participants"].get(chat_id, set()):
            return False, "–¢—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ —ç—Ç–æ–º –∏–≤–µ–Ω—Ç–µ"

        self.curr["participants"].setdefault(chat_id, set()).add(user_id)
        return True, f"–£–¥–∞—á–∏, {user_name}, –≤ —É—á–∞—Å—Ç–∏–∏ –≤ ¬´{self.curr['name']}¬ª!"

    def info(self) -> str:
        if self.curr:
            if self.curr["status"] == "waiting":
                s = int((self.curr["start"] - datetime.utcnow()).total_seconds())
                return f"–î–æ –Ω–∞—á–∞–ª–∞ ¬´{self.curr['name']}¬ª {fmt(s)}."
            if self.curr["status"] == "active":
                s = int((self.curr["end"] - datetime.utcnow()).total_seconds())
                return f"¬´{self.curr['name']}¬ª –∏–¥—ë—Ç, –æ—Å—Ç–∞–ª–æ—Å—å {fmt(s)}."
        else:
            if self.next_start:
                s = int((self.next_start - datetime.utcnow()).total_seconds())
                if s > 0:
                    return f"–ù–æ–≤—ã–π –∏–≤–µ–Ω—Ç —á–µ—Ä–µ–∑ {fmt(s)}."
        return "–µ—Å–ª–∏ –≤—ã –≤–∏–¥–∏—Ç–µ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ, —Ç–æ —Ä–∞–∑—Ä–∞–± –¥–æ–ª–±–∞–µ–±"

    async def _schedule_next(self, ctx=None):
        wait_sec = random.randint(MIN_WAIT, MAX_WAIT)

        ev_cls = random.choice(EVENT_POOL)
        self.curr = {
            "id": ev_cls.id,
            "name": ev_cls.name,
            "class": ev_cls,
            "status": "waiting",
            "start": datetime.utcnow() + timedelta(seconds=wait_sec),
            "duration": None,
            "participants": {},
        }
        self.next_start = None
        self.jq.run_once(self._start, wait_sec)

    async def _start(self, ctx):
        ev = self.curr
        ev["status"] = "active"

        dur_sec = random.randint(MIN_DUR, MAX_DUR)
        ev["duration"] = dur_sec
        ev["end"] = datetime.utcnow() + timedelta(seconds=dur_sec)

        for cid, users in ev["participants"].items():
            if not users:
                continue
            await ctx.bot.send_message(
                cid, f"üöÄ ¬´{ev['name']}¬ª –Ω–∞—á–∞–ª—Å—è! {fmt(dur_sec)}."
            )

        self.jq.run_once(self._finish, dur_sec)

    async def _finish(self, ctx):
        ev = self.curr
        texts = ev["class"](ev["participants"]).finish()

        for cid, users in ev["participants"].items():
            if not users:
                continue
            await ctx.bot.send_message(
                cid, f"üèÅ ¬´{ev['name']}¬ª –∑–∞–≤–µ—Ä—à—ë–Ω!\n{texts[cid]}"
            )

        ev["participants"].clear()
        self.curr = None

        gap_sec = random.randint(MIN_GAP, MAX_GAP)
        self.next_start = datetime.utcnow() + timedelta(seconds=gap_sec)
        self.jq.run_once(self._schedule_next, gap_sec)
